// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name LoggerAPI
import Foundation
@_exported import LoggerAPI
import Logging
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension LoggerAPI.LoggerMessageType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol Logger {
  func log(_ type: LoggerAPI.LoggerMessageType, msg: Swift.String, functionName: Swift.String, lineNum: Swift.Int, fileName: Swift.String)
  func isLogging(_ level: LoggerAPI.LoggerMessageType) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logger: (any LoggerAPI.Logger)? {
    get
    set
  }
  public static var swiftLogger: Logging.Logger? {
    get
    set
  }
  public static func verbose(_ msg: @autoclosure () -> Swift.String, functionName: Swift.String = #function, lineNum: Swift.Int = #line, fileName: Swift.String = #file)
  public class func info(_ msg: @autoclosure () -> Swift.String, functionName: Swift.String = #function, lineNum: Swift.Int = #line, fileName: Swift.String = #file)
  public class func warning(_ msg: @autoclosure () -> Swift.String, functionName: Swift.String = #function, lineNum: Swift.Int = #line, fileName: Swift.String = #file)
  public class func error(_ msg: @autoclosure () -> Swift.String, functionName: Swift.String = #function, lineNum: Swift.Int = #line, fileName: Swift.String = #file)
  public class func debug(_ msg: @autoclosure () -> Swift.String, functionName: Swift.String = #function, lineNum: Swift.Int = #line, fileName: Swift.String = #file)
  public class func entry(_ msg: @autoclosure () -> Swift.String, functionName: Swift.String = #function, lineNum: Swift.Int = #line, fileName: Swift.String = #file)
  public class func exit(_ msg: @autoclosure () -> Swift.String, functionName: Swift.String = #function, lineNum: Swift.Int = #line, fileName: Swift.String = #file)
  public class func isLogging(_ level: LoggerAPI.LoggerMessageType) -> Swift.Bool
  @objc deinit
}
public enum LoggerMessageType : Swift.Int {
  case entry
  case exit
  case debug
  case verbose
  case info
  case warning
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension LoggerAPI.LoggerMessageType : Swift.Equatable {}
extension LoggerAPI.LoggerMessageType : Swift.Hashable {}
extension LoggerAPI.LoggerMessageType : Swift.RawRepresentable {}
